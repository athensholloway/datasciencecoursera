path <- paste(directory, "/", sprintf("%03d.csv", monitor), sep="")
data <- read.csv(path)
results <- cbind(id, nrow(complete.cases(data)))
}
return results
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
for(monitor in id) {
path <- paste(directory, "/", sprintf("%03d.csv", monitor), sep="")
data <- read.csv(path)
results <- cbind(id, nrow(complete.cases(data)))
}
results
}
complete("specdata", 1:4)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
for(monitor in id) {
path <- paste(directory, "/", sprintf("%03d.csv", monitor), sep="")
data <- read.csv(path)
nrow(complete.cases(data))
results <- cbind(id, nrow(complete.cases(data)))
}
results
}
complete("specdata", 1:4)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- list()
for(monitor in id) {
path <- paste(directory, "/", sprintf("%03d.csv", monitor), sep="")
data <- read.csv(path)
nrow(complete.cases(data))
results[[length(results)+1]] <- list(id, nrow(complete.cases(data)))
}
results
}
complete("specdata", 1:4)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- list()
for(monitor in id) {
path <- paste(directory, "/", sprintf("%03d.csv", monitor), sep="")
data <- read.csv(path)
nobs <- nrow(complete.cases(data))
cbind(id,nobs)
#results[[length(results)+1]] <- list(id, )
}
#results
}
complete("specdata", 1:4)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- list()
for(monitor in id) {
path <- paste(directory, "/", sprintf("%03d.csv", monitor), sep="")
data <- read.csv(path)
nobs <- nrow(complete.cases(data))
print(cbind(id,nobs))
#results[[length(results)+1]] <- list(id, )
}
#results
}
complete("specdata", 1:4)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- list()
for(monitor in id) {
path <- paste(directory, "/", sprintf("%03d.csv", monitor), sep="")
data <- read.csv(path)
nobs <- nrow(complete.cases(data))
print(cbind(id,nobs)[1,])
#results[[length(results)+1]] <- list(id, )
}
#results
}
complete("specdata", 1:4)
complete <- function(directory, id = 1:332) {
combined <- data.frame()
for (i in id){
fullid <- formatC(i, width = 3, format = "d", flag = "0")
filename <- paste(directory, "/", fullid, ".csv", sep="")
nobs <- sum(complete.cases(read.csv(filename, header = TRUE)))
newrow <- c(i, nobs)
combined <- rbind(combined, newrow)
# rbind appends datasets by rows
}
colnames(combined) <- c("id", "nobs")
combined
}
complete("specdata", 1:4)
complete <- function(directory, id = 1:332) {
combined <- data.frame()
for (i in id){
fullid <- formatC(i, width = 3, format = "d", flag = "0")
filename <- paste(directory, "/", fullid, ".csv", sep="")
#nobs <- sum(complete.cases(read.csv(filename, header = TRUE)))
nobs <- nrow(complete.cases(data))
newrow <- c(i, nobs)
combined <- rbind(combined, newrow)
# rbind appends datasets by rows
}
colnames(combined) <- c("id", "nobs")
combined
}
complete("specdata", 1:4)
p
sum(p)
sum(complete.cases(p))
nrow(complete.cases(p))
nrow(p[complete.cases(p)])
nrow(p[complete.cases(p),])
cbind(1,117)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- list()
for(i in id) {
path <- paste(directory, "/", sprintf("%03d.csv", i), sep="")
data <- read.csv(path)
nobs <- nrow(data[complete.cases(data),])
results <- rbind(results, c(i, nobs))
}
results
}
complete("specdata", 1:4)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- list()
for(i in id) {
path <- paste(directory, "/", sprintf("%03d.csv", i), sep="")
data <- read.csv(path)
nobs <- nrow(data[complete.cases(data),])
results <- rbind(results, c(i, nobs))
}
colnames(results) <- c("id","nobs")
results
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
results <- list()
for(i in id) {
path <- paste(directory, "/", sprintf("%03d.csv", i), sep="")
data <- read.csv(path)
nobs <- nrow(data[complete.cases(data),])
results <- rbind(results, c(i, nobs))
}
colnames(results) <- c("id","nobs")
results
}
complete("specdata", 1:4)
c <- complete("specdata", 1:4)
c
c[c["nobs"] > 1000]
c[c[,"nobs"] > 1000]
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
c <- complete("specdata", threshold)
## Return a numeric vector of correlations
c[c[,"nobs"] > threshold]
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
c <- complete(directory, threshold)
## Return a numeric vector of correlations
c[c[,"nobs"] > threshold]
}
corr("specdata", 150)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
cr
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
c <- complete(directory)
## Return a numeric vector of correlations
c[c[,"nobs"] > threshold]
}
getwd()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
c <- complete(directory)
## Return a numeric vector of correlations
c[c[,"nobs"] > threshold]
}
cr <- corr("specdata", 150)
cr
head(cr)
clear
cls
c
c['nobs']
c['nobs']>300
corr <- function(directory, threshold = 0) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'threshold' is a numeric vector of length 1
# indicating the number of completely observed observations (on all
# variables) required to compute the correlation between nitrate and
# sulfate; the default is 0.  Return a numeric vector of correlations.
# --- Assert create an empty numeric vector
corrsNum <- numeric(0)
# --- Assert get a data frame as ID = 1:332
nobsDfr <- complete("specdata")
# --- Assert apply threshold
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for (cid in nobsDfr$id) {
# --- Assert get a data frame as ID in $id
monDfr <- getmonitor(cid, directory)
# --- Assert calculate correlation between $sulfate and $nitrate
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
# --- Assert return value is a numeric vector of correlations
return(corrsNum)
}
cr <- corr("specdata", 150)
head(cr)
cr <- complete("specdata", 1:4)
cr
getmonitor <- function(id, directory, summarize = FALSE) {
# --- Assert 'id' is a vector of length 1 indicating the monitor ID
# number. The user can specify 'id' as either an integer, a character, or
# a numeric.  'directory' is a character vector of length 1 indicating the
# location of the CSV files 'summarize' is a logical indicating whether a
# summary of the data should be printed to the console; the default is
# FALSE
# --- Assert construct file name Directory is pre-appended to file name.
# Use sprintf() to add leading zeroes.  E.g. 'specdata/001.csv'
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
# --- Assert read csv
rawDfr <- read.csv(fileStr)
# --- Assert summary if true
if (summarize) {
print(summary(rawDfr))
}
# --- Return value is a data frame
return(rawDfr)
}
corr <- function(directory, threshold = 0) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'threshold' is a numeric vector of length 1
# indicating the number of completely observed observations (on all
# variables) required to compute the correlation between nitrate and
# sulfate; the default is 0.  Return a numeric vector of correlations.
# --- Assert create an empty numeric vector
corrsNum <- numeric(0)
# --- Assert get a data frame as ID = 1:332
nobsDfr <- complete("specdata")
# --- Assert apply threshold
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for (cid in nobsDfr$id) {
# --- Assert get a data frame as ID in $id
monDfr <- getmonitor(cid, directory)
# --- Assert calculate correlation between $sulfate and $nitrate
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
# --- Assert return value is a numeric vector of correlations
return(corrsNum)
}
cr <- corr("specdata", 150)
head(cr)
#
# |------------------------------------------------------------------------------------------|
# | I N T E R N A L F U N C T I O N S |
# |------------------------------------------------------------------------------------------|
corr <- function(directory, threshold = 0) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'threshold' is a numeric vector of length 1
# indicating the number of completely observed observations (on all
# variables) required to compute the correlation between nitrate and
# sulfate; the default is 0.  Return a numeric vector of correlations.
# --- Assert create an empty numeric vector
corrsNum <- numeric(0)
# --- Assert get a data frame as ID = 1:332
nobsDfr <- complete("specdata")
# --- Assert apply threshold
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for (cid in nobsDfr$id) {
# --- Assert get a data frame as ID in $id
monDfr <- getmonitor(cid, directory)
# --- Assert calculate correlation between $sulfate and $nitrate
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
# --- Assert return value is a numeric vector of correlations
return(corrsNum)
}
complete <- function(directory, id = 1:332) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'id' is an integer vector indicating the
# monitor ID numbers to be used Return a data frame of the form: id nobs 1
# 117 2 1041 ...  where 'id' is the monitor ID number and 'nobs' is the
# number of complete cases
# --- Assert create an empty vector
nobsNum <- numeric(0)
for (cid in id) {
# --- Assert get data frame as ID
cDfr <- getmonitor(cid, directory)
# --- Assert count the number of complete cases and append to numeric
# vector
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
# --- Assert return value is a data frame with TWO (2) columns
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
# --- Assert 'id' is a vector of length 1 indicating the monitor ID
# number. The user can specify 'id' as either an integer, a character, or
# a numeric.  'directory' is a character vector of length 1 indicating the
# location of the CSV files 'summarize' is a logical indicating whether a
# summary of the data should be printed to the console; the default is
# FALSE
# --- Assert construct file name Directory is pre-appended to file name.
# Use sprintf() to add leading zeroes.  E.g. 'specdata/001.csv'
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
# --- Assert read csv
rawDfr <- read.csv(fileStr)
# --- Assert summary if true
if (summarize) {
print(summary(rawDfr))
}
# --- Return value is a data frame
return(rawDfr)
}
#
# |------------------------------------------------------------------------------------------|
# | M A I N P R O C E D U R E |
# |------------------------------------------------------------------------------------------|
# --- Init set working directory
Init()
# --- Get correlations vector as threshold = 150
data <- corr("specdata", 150)
head(data)
c
c$nobs
c[c$nobs > 300, ]
c[c$nobs > 2, ]
c
c <- complete("specdata", 1:4)
c
c[c$nobs > 2, ]
c[c$nobs > 300, ]
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
result <- numeric(0)
c <- complete(directory)
c <- c[c$nobs > threshhold, ]
for (i in c$id) {
path <- paste(directory, "/", sprintf("%03d.csv", i), sep="")
data <- read.csv(path)
result <- c(result, cor(data$sulfate, data$nitrate, use = "pairwise.complete.obs"))
}
return(result)
}
data <- corr("specdata", 150)
head(data)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
source("complete.R")
complete("specdata", 1)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
result <- numeric(0)
for (i in id) {
path <- paste(directory, "/", sprintf("%03d.csv", i), sep="")
data <- read.csv(path)
result <- c(result, nrow(na.omit(data)))
}
data.frame(id = id, nobs = result)
}
complete("specdata", 1)
submit()
submit()
submit()
submit()
submit()
submit()
